//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `main`.
    var main: RswiftResources.ColorResource { .init(name: "main", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 42 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `back`.
    var back: RswiftResources.ImageResource { .init(name: "back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bell`.
    var bell: RswiftResources.ImageResource { .init(name: "bell", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera`.
    var camera: RswiftResources.ImageResource { .init(name: "camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat`.
    var chat: RswiftResources.ImageResource { .init(name: "chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `color`.
    var color: RswiftResources.ImageResource { .init(name: "color", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `deny`.
    var deny: RswiftResources.ImageResource { .init(name: "deny", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `disk`.
    var disk: RswiftResources.ImageResource { .init(name: "disk", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `grid`.
    var grid: RswiftResources.ImageResource { .init(name: "grid", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `grid-0`.
    var grid0: RswiftResources.ImageResource { .init(name: "grid-0", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hatena`.
    var hatena: RswiftResources.ImageResource { .init(name: "hatena", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home`.
    var home: RswiftResources.ImageResource { .init(name: "home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon-1024`.
    var icon1024: RswiftResources.ImageResource { .init(name: "icon-1024", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_1024`.
    var icon_1024: RswiftResources.ImageResource { .init(name: "icon_1024", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_120`.
    var icon_120: RswiftResources.ImageResource { .init(name: "icon_120", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_152`.
    var icon_152: RswiftResources.ImageResource { .init(name: "icon_152", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_167`.
    var icon_167: RswiftResources.ImageResource { .init(name: "icon_167", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_180`.
    var icon_180: RswiftResources.ImageResource { .init(name: "icon_180", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_20`.
    var icon_20: RswiftResources.ImageResource { .init(name: "icon_20", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_29`.
    var icon_29: RswiftResources.ImageResource { .init(name: "icon_29", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_40`.
    var icon_40: RswiftResources.ImageResource { .init(name: "icon_40", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_58`.
    var icon_58: RswiftResources.ImageResource { .init(name: "icon_58", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_60`.
    var icon_60: RswiftResources.ImageResource { .init(name: "icon_60", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_76`.
    var icon_76: RswiftResources.ImageResource { .init(name: "icon_76", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_80`.
    var icon_80: RswiftResources.ImageResource { .init(name: "icon_80", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `icon_87`.
    var icon_87: RswiftResources.ImageResource { .init(name: "icon_87", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `man`.
    var man: RswiftResources.ImageResource { .init(name: "man", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu`.
    var menu: RswiftResources.ImageResource { .init(name: "menu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `obake`.
    var obake: RswiftResources.ImageResource { .init(name: "obake", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pen`.
    var pen: RswiftResources.ImageResource { .init(name: "pen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person`.
    var person: RswiftResources.ImageResource { .init(name: "person", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person-icon`.
    var personIcon: RswiftResources.ImageResource { .init(name: "person-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post`.
    var post: RswiftResources.ImageResource { .init(name: "post", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `refresh`.
    var refresh: RswiftResources.ImageResource { .init(name: "refresh", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reload`.
    var reload: RswiftResources.ImageResource { .init(name: "reload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reply`.
    var reply: RswiftResources.ImageResource { .init(name: "reply", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `save`.
    var save: RswiftResources.ImageResource { .init(name: "save", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search`.
    var search: RswiftResources.ImageResource { .init(name: "search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting`.
    var setting: RswiftResources.ImageResource { .init(name: "setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `table`.
    var table: RswiftResources.ImageResource { .init(name: "table", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `talk`.
    var talk: RswiftResources.ImageResource { .init(name: "talk", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `woman`.
    var woman: RswiftResources.ImageResource { .init(name: "woman", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `x`.
    var x: RswiftResources.ImageResource { .init(name: "x", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 0 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
  }

  /// This `_R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `NotoSansCJKjpSub-Black`.
    var notoSansCJKjpSubBlack: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-Black", bundle: bundle, filename: "NotoSansCJKjpSub-Black.otf") }

    /// Font `NotoSansCJKjpSub-Bold`.
    var notoSansCJKjpSubBold: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-Bold", bundle: bundle, filename: "NotoSansCJKjpSub-Bold.otf") }

    /// Font `NotoSansCJKjpSub-DemiLight`.
    var notoSansCJKjpSubDemiLight: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-DemiLight", bundle: bundle, filename: "NotoSansCJKjpSub-DemiLight.otf") }

    /// Font `NotoSansCJKjpSub-Light`.
    var notoSansCJKjpSubLight: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-Light", bundle: bundle, filename: "NotoSansCJKjpSub-Light.otf") }

    /// Font `NotoSansCJKjpSub-Medium`.
    var notoSansCJKjpSubMedium: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-Medium", bundle: bundle, filename: "NotoSansCJKjpSub-Medium.otf") }

    /// Font `NotoSansCJKjpSub-Regular`.
    var notoSansCJKjpSubRegular: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-Regular", bundle: bundle, filename: "NotoSansCJKjpSub-Regular.otf") }

    /// Font `NotoSansCJKjpSub-Thin`.
    var notoSansCJKjpSubThin: RswiftResources.FontResource { .init(name: "NotoSansCJKjpSub-Thin", bundle: bundle, filename: "NotoSansCJKjpSub-Thin.otf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [notoSansCJKjpSubBlack, notoSansCJKjpSubBold, notoSansCJKjpSubDemiLight, notoSansCJKjpSubLight, notoSansCJKjpSubMedium, notoSansCJKjpSubRegular, notoSansCJKjpSubThin].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 25 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info-dev.plist`.
    var googleServiceInfoDevPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info-dev", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-Black.otf`.
    var notoSansCJKjpSubBlackOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-Black", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-Bold.otf`.
    var notoSansCJKjpSubBoldOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-DemiLight.otf`.
    var notoSansCJKjpSubDemiLightOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-DemiLight", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-Light.otf`.
    var notoSansCJKjpSubLightOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-Light", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-Medium.otf`.
    var notoSansCJKjpSubMediumOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-Regular.otf`.
    var notoSansCJKjpSubRegularOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSansCJKjpSub-Thin.otf`.
    var notoSansCJKjpSubThinOtf: RswiftResources.FileResource { .init(name: "NotoSansCJKjpSub-Thin", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `PrivacyPoricy.html`.
    var privacyPoricyHtml: RswiftResources.FileResource { .init(name: "PrivacyPoricy", pathExtension: "html", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Rule.html`.
    var ruleHtml: RswiftResources.FileResource { .init(name: "Rule", pathExtension: "html", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SKPhotoBrowser.bundle`.
    var skPhotoBrowserBundle: RswiftResources.FileResource { .init(name: "SKPhotoBrowser", pathExtension: "bundle", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon-1024.png`.
    var icon1024Png: RswiftResources.FileResource { .init(name: "icon-1024", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_120.png`.
    var icon_120Png: RswiftResources.FileResource { .init(name: "icon_120", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_152.png`.
    var icon_152Png: RswiftResources.FileResource { .init(name: "icon_152", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_167.png`.
    var icon_167Png: RswiftResources.FileResource { .init(name: "icon_167", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_180.png`.
    var icon_180Png: RswiftResources.FileResource { .init(name: "icon_180", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_20.png`.
    var icon_20Png: RswiftResources.FileResource { .init(name: "icon_20", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_29.png`.
    var icon_29Png: RswiftResources.FileResource { .init(name: "icon_29", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_40.png`.
    var icon_40Png: RswiftResources.FileResource { .init(name: "icon_40", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_58.png`.
    var icon_58Png: RswiftResources.FileResource { .init(name: "icon_58", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_60.png`.
    var icon_60Png: RswiftResources.FileResource { .init(name: "icon_60", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_76.png`.
    var icon_76Png: RswiftResources.FileResource { .init(name: "icon_76", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_80.png`.
    var icon_80Png: RswiftResources.FileResource { .init(name: "icon_80", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `icon_87.png`.
    var icon_87Png: RswiftResources.FileResource { .init(name: "icon_87", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ArticleTableViewCell`.
    var articleTableViewCell: RswiftResources.NibReferenceReuseIdentifier<ArticleTableViewCell, ArticleTableViewCell> { .init(name: "ArticleTableViewCell", bundle: bundle, identifier: "ArticleTableViewCell") }

    /// Nib `FootprintTableViewCell`.
    var footprintTableViewCell: RswiftResources.NibReferenceReuseIdentifier<FootprintTableViewCell, FootprintTableViewCell> { .init(name: "FootprintTableViewCell", bundle: bundle, identifier: "FootprintTableViewCell") }

    /// Nib `IndicatorView`.
    var indicatorView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "IndicatorView", bundle: bundle) }

    /// Nib `NoticeTableViewCell`.
    var noticeTableViewCell: RswiftResources.NibReferenceReuseIdentifier<NoticeTableViewCell, NoticeTableViewCell> { .init(name: "NoticeTableViewCell", bundle: bundle, identifier: "NoticeTableViewCell") }

    /// Nib `ProfileCell`.
    var profileCell: RswiftResources.NibReferenceReuseIdentifier<ProfileCell, ProfileCell> { .init(name: "ProfileCell", bundle: bundle, identifier: "ProfileCell") }

    /// Nib `SearchGridCell`.
    var searchGridCell: RswiftResources.NibReferenceReuseIdentifier<SearchGridCell, SearchGridCell> { .init(name: "SearchGridCell", bundle: bundle, identifier: "SearchGridCell") }

    /// Nib `SearchWideCell`.
    var searchWideCell: RswiftResources.NibReferenceReuseIdentifier<SearchWideCell, SearchWideCell> { .init(name: "SearchWideCell", bundle: bundle, identifier: "SearchWideCell") }

    /// Nib `TalkButtonTableViewCell`.
    var talkButtonTableViewCell: RswiftResources.NibReferenceReuseIdentifier<TalkButtonTableViewCell, TalkButtonTableViewCell> { .init(name: "TalkButtonTableViewCell", bundle: bundle, identifier: "TalkButtonTableViewCell") }

    func validate() throws {
      if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in nib 'ArticleTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "reply", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'reply' is used in nib 'ArticleTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "talk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'talk' is used in nib 'ArticleTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "main", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'main' is used in nib 'ArticleTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in nib 'FootprintTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in nib 'NoticeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in nib 'ProfileCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "main", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'main' is used in nib 'ProfileCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in nib 'SearchGridCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in nib 'SearchWideCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "talk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'talk' is used in nib 'SearchWideCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "main", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'main' is used in nib 'TalkButtonTableViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `ArticleTableViewCell`.
    let articleTableViewCell: RswiftResources.ReuseIdentifier<ArticleTableViewCell> = .init(identifier: "ArticleTableViewCell")

    /// Reuse identifier `BlockListCell`.
    let blockListCell: RswiftResources.ReuseIdentifier<BlockListCell> = .init(identifier: "BlockListCell")

    /// Reuse identifier `ChatRoomListCell`.
    let chatRoomListCell: RswiftResources.ReuseIdentifier<ChatRoomListCell> = .init(identifier: "ChatRoomListCell")

    /// Reuse identifier `FaqTableViewCell`.
    let faqTableViewCell: RswiftResources.ReuseIdentifier<FaqTableViewCell> = .init(identifier: "FaqTableViewCell")

    /// Reuse identifier `FootprintTableViewCell`.
    let footprintTableViewCell: RswiftResources.ReuseIdentifier<FootprintTableViewCell> = .init(identifier: "FootprintTableViewCell")

    /// Reuse identifier `NoticeTableViewCell`.
    let noticeTableViewCell: RswiftResources.ReuseIdentifier<NoticeTableViewCell> = .init(identifier: "NoticeTableViewCell")

    /// Reuse identifier `ProfileCell`.
    let profileCell: RswiftResources.ReuseIdentifier<ProfileCell> = .init(identifier: "ProfileCell")

    /// Reuse identifier `SearchGridCell`.
    let searchGridCell: RswiftResources.ReuseIdentifier<SearchGridCell> = .init(identifier: "SearchGridCell")

    /// Reuse identifier `SearchWideCell`.
    let searchWideCell: RswiftResources.ReuseIdentifier<SearchWideCell> = .init(identifier: "SearchWideCell")

    /// Reuse identifier `TalkButtonTableViewCell`.
    let talkButtonTableViewCell: RswiftResources.ReuseIdentifier<TalkButtonTableViewCell> = .init(identifier: "TalkButtonTableViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 24 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var account: account { .init(bundle: bundle) }
    var article: article { .init(bundle: bundle) }
    var articleReplyLog: articleReplyLog { .init(bundle: bundle) }
    var blockList: blockList { .init(bundle: bundle) }
    var chat: chat { .init(bundle: bundle) }
    var faq: faq { .init(bundle: bundle) }
    var footPrint: footPrint { .init(bundle: bundle) }
    var home: home { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var message: message { .init(bundle: bundle) }
    var myPage: myPage { .init(bundle: bundle) }
    var newPasscodeInput: newPasscodeInput { .init(bundle: bundle) }
    var notice: notice { .init(bundle: bundle) }
    var passcodeLock: passcodeLock { .init(bundle: bundle) }
    var privacy: privacy { .init(bundle: bundle) }
    var privacyPoricy: privacyPoricy { .init(bundle: bundle) }
    var profile: profile { .init(bundle: bundle) }
    var registProfile: registProfile { .init(bundle: bundle) }
    var rule: rule { .init(bundle: bundle) }
    var search: search { .init(bundle: bundle) }
    var searchWindow: searchWindow { .init(bundle: bundle) }
    var uderDetail: uderDetail { .init(bundle: bundle) }
    var write: write { .init(bundle: bundle) }

    func account(bundle: Foundation.Bundle) -> account {
      .init(bundle: bundle)
    }
    func article(bundle: Foundation.Bundle) -> article {
      .init(bundle: bundle)
    }
    func articleReplyLog(bundle: Foundation.Bundle) -> articleReplyLog {
      .init(bundle: bundle)
    }
    func blockList(bundle: Foundation.Bundle) -> blockList {
      .init(bundle: bundle)
    }
    func chat(bundle: Foundation.Bundle) -> chat {
      .init(bundle: bundle)
    }
    func faq(bundle: Foundation.Bundle) -> faq {
      .init(bundle: bundle)
    }
    func footPrint(bundle: Foundation.Bundle) -> footPrint {
      .init(bundle: bundle)
    }
    func home(bundle: Foundation.Bundle) -> home {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func message(bundle: Foundation.Bundle) -> message {
      .init(bundle: bundle)
    }
    func myPage(bundle: Foundation.Bundle) -> myPage {
      .init(bundle: bundle)
    }
    func newPasscodeInput(bundle: Foundation.Bundle) -> newPasscodeInput {
      .init(bundle: bundle)
    }
    func notice(bundle: Foundation.Bundle) -> notice {
      .init(bundle: bundle)
    }
    func passcodeLock(bundle: Foundation.Bundle) -> passcodeLock {
      .init(bundle: bundle)
    }
    func privacy(bundle: Foundation.Bundle) -> privacy {
      .init(bundle: bundle)
    }
    func privacyPoricy(bundle: Foundation.Bundle) -> privacyPoricy {
      .init(bundle: bundle)
    }
    func profile(bundle: Foundation.Bundle) -> profile {
      .init(bundle: bundle)
    }
    func registProfile(bundle: Foundation.Bundle) -> registProfile {
      .init(bundle: bundle)
    }
    func rule(bundle: Foundation.Bundle) -> rule {
      .init(bundle: bundle)
    }
    func search(bundle: Foundation.Bundle) -> search {
      .init(bundle: bundle)
    }
    func searchWindow(bundle: Foundation.Bundle) -> searchWindow {
      .init(bundle: bundle)
    }
    func uderDetail(bundle: Foundation.Bundle) -> uderDetail {
      .init(bundle: bundle)
    }
    func write(bundle: Foundation.Bundle) -> write {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.account.validate()
      try self.article.validate()
      try self.articleReplyLog.validate()
      try self.blockList.validate()
      try self.chat.validate()
      try self.faq.validate()
      try self.footPrint.validate()
      try self.home.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.message.validate()
      try self.myPage.validate()
      try self.newPasscodeInput.validate()
      try self.notice.validate()
      try self.passcodeLock.validate()
      try self.privacy.validate()
      try self.privacyPoricy.validate()
      try self.profile.validate()
      try self.registProfile.validate()
      try self.rule.validate()
      try self.search.validate()
      try self.searchWindow.validate()
      try self.uderDetail.validate()
      try self.write.validate()
    }


    /// Storyboard `Account`.
    struct account: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = AccountTableViewController

      let bundle: Foundation.Bundle

      let name = "Account"

      var accountTableViewController: RswiftResources.StoryboardViewControllerIdentifier<AccountTableViewController> { .init(identifier: "AccountTableViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'Account', but couldn't be loaded.") }
        if accountTableViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'accountTableViewController' could not be loaded from storyboard 'Account' as 'AccountTableViewController'.") }
      }
    }

    /// Storyboard `Article`.
    struct article: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Article"

      var articleListViewController: RswiftResources.StoryboardViewControllerIdentifier<ArticleListViewController> { .init(identifier: "ArticleListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'Article', but couldn't be loaded.") }
        if UIKit.UIImage(named: "refresh", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'refresh' is used in storyboard 'Article', but couldn't be loaded.") }
        if articleListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'articleListViewController' could not be loaded from storyboard 'Article' as 'ArticleListViewController'.") }
      }
    }

    /// Storyboard `ArticleReplyLog`.
    struct articleReplyLog: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ArticleReplyLogViewController

      let bundle: Foundation.Bundle

      let name = "ArticleReplyLog"

      var articleReplyLogViewController: RswiftResources.StoryboardViewControllerIdentifier<ArticleReplyLogViewController> { .init(identifier: "ArticleReplyLogViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if articleReplyLogViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'articleReplyLogViewController' could not be loaded from storyboard 'ArticleReplyLog' as 'ArticleReplyLogViewController'.") }
      }
    }

    /// Storyboard `BlockList`.
    struct blockList: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = BlockListViewController

      let bundle: Foundation.Bundle

      let name = "BlockList"

      var blockListViewController: RswiftResources.StoryboardViewControllerIdentifier<BlockListViewController> { .init(identifier: "BlockListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'BlockList', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in storyboard 'BlockList', but couldn't be loaded.") }
        if UIKit.UIImage(named: "refresh", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'refresh' is used in storyboard 'BlockList', but couldn't be loaded.") }
        if blockListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockListViewController' could not be loaded from storyboard 'BlockList' as 'BlockListViewController'.") }
      }
    }

    /// Storyboard `Chat`.
    struct chat: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Chat"

      var chatRoomListViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatRoomListViewController> { .init(identifier: "ChatRoomListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "chat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "refresh", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'refresh' is used in storyboard 'Chat', but couldn't be loaded.") }
        if chatRoomListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatRoomListViewController' could not be loaded from storyboard 'Chat' as 'ChatRoomListViewController'.") }
      }
    }

    /// Storyboard `Faq`.
    struct faq: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = FaqViewController

      let bundle: Foundation.Bundle

      let name = "Faq"

      var faqViewController: RswiftResources.StoryboardViewControllerIdentifier<FaqViewController> { .init(identifier: "FaqViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'Faq', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hatena", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'hatena' is used in storyboard 'Faq', but couldn't be loaded.") }
        if faqViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'faqViewController' could not be loaded from storyboard 'Faq' as 'FaqViewController'.") }
      }
    }

    /// Storyboard `FootPrint`.
    struct footPrint: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = FootPrintViewController

      let bundle: Foundation.Bundle

      let name = "FootPrint"

      var footPrintViewController: RswiftResources.StoryboardViewControllerIdentifier<FootPrintViewController> { .init(identifier: "FootPrintViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if footPrintViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'footPrintViewController' could not be loaded from storyboard 'FootPrint' as 'FootPrintViewController'.") }
      }
    }

    /// Storyboard `Home`.
    struct home: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Home"

      var homeViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeViewController> { .init(identifier: "HomeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'pen' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "refresh", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'refresh' is used in storyboard 'Home', but couldn't be loaded.") }
        if homeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "icon_1024", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_1024' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "main", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'main' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MainTabViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var mainTabViewController: RswiftResources.StoryboardViewControllerIdentifier<MainTabViewController> { .init(identifier: "MainTabViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if mainTabViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainTabViewController' could not be loaded from storyboard 'Main' as 'MainTabViewController'.") }
      }
    }

    /// Storyboard `Message`.
    struct message: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ChatMessageViewController

      let bundle: Foundation.Bundle

      let name = "Message"

      var chatMessageViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatMessageViewController> { .init(identifier: "ChatMessageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if chatMessageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatMessageViewController' could not be loaded from storyboard 'Message' as 'ChatMessageViewController'.") }
      }
    }

    /// Storyboard `MyPage`.
    struct myPage: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "MyPage"

      var settingNVC: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "SettingNVC", storyboard: name, bundle: bundle) }
      var settingTableViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingTableViewController> { .init(identifier: "SettingTableViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "person", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person' is used in storyboard 'MyPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'setting' is used in storyboard 'MyPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "x", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'x' is used in storyboard 'MyPage', but couldn't be loaded.") }
        if settingNVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingNVC' could not be loaded from storyboard 'MyPage' as 'UIKit.UINavigationController'.") }
        if settingTableViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingTableViewController' could not be loaded from storyboard 'MyPage' as 'SettingTableViewController'.") }
      }
    }

    /// Storyboard `NewPasscodeInput`.
    struct newPasscodeInput: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "NewPasscodeInput"

      var newPasscodeInputViewController: RswiftResources.StoryboardViewControllerIdentifier<NewPasscodeInputViewController> { .init(identifier: "NewPasscodeInputViewController", storyboard: name, bundle: bundle) }
      var newPasscodeNVC: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "NewPasscodeNVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if newPasscodeInputViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'newPasscodeInputViewController' could not be loaded from storyboard 'NewPasscodeInput' as 'NewPasscodeInputViewController'.") }
        if newPasscodeNVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'newPasscodeNVC' could not be loaded from storyboard 'NewPasscodeInput' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Notice`.
    struct notice: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Notice"

      var noticeViewController: RswiftResources.StoryboardViewControllerIdentifier<NoticeViewController> { .init(identifier: "NoticeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "bell", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bell' is used in storyboard 'Notice', but couldn't be loaded.") }
        if noticeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'noticeViewController' could not be loaded from storyboard 'Notice' as 'NoticeViewController'.") }
      }
    }

    /// Storyboard `PasscodeLock`.
    struct passcodeLock: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "PasscodeLock"

      var passcodeLockViewController: RswiftResources.StoryboardViewControllerIdentifier<PasscodeLockViewController> { .init(identifier: "PasscodeLockViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if passcodeLockViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'passcodeLockViewController' could not be loaded from storyboard 'PasscodeLock' as 'PasscodeLockViewController'.") }
      }
    }

    /// Storyboard `Privacy`.
    struct privacy: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = PrivacyViewController

      let bundle: Foundation.Bundle

      let name = "Privacy"

      var privacyViewController: RswiftResources.StoryboardViewControllerIdentifier<PrivacyViewController> { .init(identifier: "PrivacyViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'Privacy', but couldn't be loaded.") }
        if privacyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'privacyViewController' could not be loaded from storyboard 'Privacy' as 'PrivacyViewController'.") }
      }
    }

    /// Storyboard `PrivacyPoricy`.
    struct privacyPoricy: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = PrivacyPoricyViewController

      let bundle: Foundation.Bundle

      let name = "PrivacyPoricy"

      var privacyPoricyViewController: RswiftResources.StoryboardViewControllerIdentifier<PrivacyPoricyViewController> { .init(identifier: "PrivacyPoricyViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'PrivacyPoricy', but couldn't be loaded.") }
        if UIKit.UIImage(named: "x", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'x' is used in storyboard 'PrivacyPoricy', but couldn't be loaded.") }
        if privacyPoricyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'privacyPoricyViewController' could not be loaded from storyboard 'PrivacyPoricy' as 'PrivacyPoricyViewController'.") }
      }
    }

    /// Storyboard `Profile`.
    struct profile: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ProfileEditTableViewController

      let bundle: Foundation.Bundle

      let name = "Profile"

      var profileEditTableViewController: RswiftResources.StoryboardViewControllerIdentifier<ProfileEditTableViewController> { .init(identifier: "ProfileEditTableViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "disk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'disk' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "man", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'man' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "obake", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'obake' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "woman", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'woman' is used in storyboard 'Profile', but couldn't be loaded.") }
        if profileEditTableViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileEditTableViewController' could not be loaded from storyboard 'Profile' as 'ProfileEditTableViewController'.") }
      }
    }

    /// Storyboard `RegistProfile`.
    struct registProfile: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = RegistProfileViewController

      let bundle: Foundation.Bundle

      let name = "RegistProfile"

      var registProfileViewController: RswiftResources.StoryboardViewControllerIdentifier<RegistProfileViewController> { .init(identifier: "RegistProfileViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "man", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'man' is used in storyboard 'RegistProfile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "obake", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'obake' is used in storyboard 'RegistProfile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person-icon' is used in storyboard 'RegistProfile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "woman", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'woman' is used in storyboard 'RegistProfile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "x", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'x' is used in storyboard 'RegistProfile', but couldn't be loaded.") }
        if UIKit.UIColor(named: "main", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'main' is used in storyboard 'RegistProfile', but couldn't be loaded.") }
        if registProfileViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registProfileViewController' could not be loaded from storyboard 'RegistProfile' as 'RegistProfileViewController'.") }
      }
    }

    /// Storyboard `Rule`.
    struct rule: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = RuleViewController

      let bundle: Foundation.Bundle

      let name = "Rule"

      var ruleViewController: RswiftResources.StoryboardViewControllerIdentifier<RuleViewController> { .init(identifier: "RuleViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'Rule', but couldn't be loaded.") }
        if ruleViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'ruleViewController' could not be loaded from storyboard 'Rule' as 'RuleViewController'.") }
      }
    }

    /// Storyboard `Search`.
    struct search: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Search"
      func validate() throws {
        if UIKit.UIImage(named: "menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search' is used in storyboard 'Search', but couldn't be loaded.") }
      }
    }

    /// Storyboard `SearchWindow`.
    struct searchWindow: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SearchWindow"

      var searchWindowViewController: RswiftResources.StoryboardViewControllerIdentifier<SearchWindowViewController> { .init(identifier: "SearchWindowViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "man", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'man' is used in storyboard 'SearchWindow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "obake", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'obake' is used in storyboard 'SearchWindow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "post", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post' is used in storyboard 'SearchWindow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "woman", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'woman' is used in storyboard 'SearchWindow', but couldn't be loaded.") }
        if UIKit.UIImage(named: "x", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'x' is used in storyboard 'SearchWindow', but couldn't be loaded.") }
        if searchWindowViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchWindowViewController' could not be loaded from storyboard 'SearchWindow' as 'SearchWindowViewController'.") }
      }
    }

    /// Storyboard `UderDetail`.
    struct uderDetail: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UserDetailViewController

      let bundle: Foundation.Bundle

      let name = "UderDetail"

      var userDetailViewController: RswiftResources.StoryboardViewControllerIdentifier<UserDetailViewController> { .init(identifier: "UserDetailViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back' is used in storyboard 'UderDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu' is used in storyboard 'UderDetail', but couldn't be loaded.") }
        if userDetailViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userDetailViewController' could not be loaded from storyboard 'UderDetail' as 'UserDetailViewController'.") }
      }
    }

    /// Storyboard `Write`.
    struct write: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Write"

      var writeViewController: RswiftResources.StoryboardViewControllerIdentifier<WriteViewController> { .init(identifier: "WriteViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "post", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post' is used in storyboard 'Write', but couldn't be loaded.") }
        if UIKit.UIImage(named: "x", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'x' is used in storyboard 'Write', but couldn't be loaded.") }
        if UIKit.UIColor(named: "main", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'main' is used in storyboard 'Write', but couldn't be loaded.") }
        if writeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'writeViewController' could not be loaded from storyboard 'Write' as 'WriteViewController'.") }
      }
    }
  }
}